Golang en Meli

Buenos Aires
Noviembre 2016

Gustavo Rodriguez
Mariano Labariñas

* Gin-Gonic

.image ./resources/gingonic.png 500 500

* Varias opciones

- [[http://beego.me/][*Beego*]]: framework web completo con templates y ORM 
- [[https://gin-gonic.github.io/gin/][*Gin-Gonic*]]: basado en Martini (con mejor performance)
- [[https://goji.io/][*Goji*]]: Request Multiplexer
- [[http://www.gorillatoolkit.org/][*Gorilla*]]: web toolkit
- [[https://github.com/julienschmidt/httprouter][*httprouter*]]: High performance router
- *net/http*: libraria http standar de go
- ….

* ¿Por qué Gin-Gonic?

- Compatible con net/http
- Usa httprouter (muy rápido)
- Interface familiar y amigable
- Trabaja bien con JSON
- Más de 7000 estrellas en github
- No reinventar la rueda
- Había que elegir uno :)

* Instalando gin-gonic

	go get -u github.com/gin-gonic/gin

* Ejemplo: Ping

.play ./resources/src/18_gin_hello_world/main.go


* Métodos http soportados

	func main() {
		// Creates a gin router with default middleware:
		// logger and recovery (crash-free) middleware
		router := gin.Default()
		router.GET("/someGet", getting)
		router.POST("/somePost", posting)
		router.PUT("/somePut", putting)
		router.DELETE("/someDelete", deleting)
		router.PATCH("/somePatch", patching)
		router.HEAD("/someHead", head)
		router.OPTIONS("/someOptions", options)
		// By default it serves on :8080 unless a
		// PORT environment variable was defined.
		router.Run() // router.Run(":3000") for a hard coded port
	}


* Params

.play ./resources/src/19_gin_params/main.go

* Parámetros en Querystring

.play ./resources/src/20_gin_query_params/main.go

* Otro ejemplo: query + post form

.play ./resources/src/21_gin_post/main.go

* Agrupando paths

	func main() {
		router := gin.Default()
		v1 := router.Group("/v1"){      // Simple group: v1
			v1.POST("/login", loginEndpoint)
			v1.POST("/submit", submitEndpoint)
			v1.POST("/read", readEndpoint)
		}
		v2 := router.Group("/v2"){     // Simple group: v2
			v2.POST("/login", loginEndpoint)
			v2.POST("/submit", submitEndpoint)
			v2.POST("/read", readEndpoint)
		}
		router.Run(":8080")
	}

* Middlewares

	r := gin.Default()    equivale a 	   r := gin.New()
											r.Use(gin.Logger())
											r.Use(gin.Recovery())

.image ./resources/gingonic_middlewares.png

* Custom Middlewares (authorization, gzip, etc) 

	Router.Use(dataDogHandler())
	
	func dataDogHandler() gin.HandlerFunc {
		return func(c *gin.Context) {
			initTime := time.Now()
			c.Next()
			godog.RecordFullMetric("api.request.time", time.Since(initTime).Seconds()*1000,
				new(godog.Tags).Add("method", c.Request.Method).ToArray()...)
			godog.RecordSimpleMetric(fmt.Sprintf("api.response.code%sXX", 
				strconv.FormatInt(int64(c.Writer.Status()), 10)[0:1]), 1, 
				new(godog.Tags).Add("code", strconv.Itoa(c.Writer.Status())).ToArray()...)
		}
	}

* Model Binding y validación

.play ./resources/src/22_gin_model/main.go /START OMIT/,/END OMIT/

* Otras cosas: Static Files, Html rendering y redirects

.image ./resources/gingonic_snippets.png

* Ejercicio 2

	Evolucionar el ejercicio realizado en el ejercicio 1 de forma tal que ahora se ejecute 
	en un webserver que escuche en el puerto 8080 y sea invocado al llamar al servicio 
	GET /calculo?value=p. El servicio debe devolver la respuesta en formato JSON


* Caso de uso

.image ./resources/caso_de_uso.png

* ¿Qué es la api de locations?

Servicios:

- Geolocalización por IP
- Información de las locaciones en las que trabaja MercadoLibre (países, estados, ciudades,etc)
- ABM árboles de locaciones

Tráfico: ~ 300K RPM (100% de lecturas, escrituras ocasionales)


* Migración Locations API 

0) Arquitectura Original

.image ./resources/locations0.png

* Migración Locations API 

1) Agregamos Persistencia en Key Value, Golden Gate y Sincronizador KV/RDBS

.image ./resources/locations1.png

* Migración Locations API 

2) Eliminamos el Admin  y la réplica de Viejo Mundo 

.image ./resources/locations2.png

* Migración Locations API 

3) Redirigimos tráfico de VIR a versión de Golang y matamos pooles innecesarios

.image ./resources/locations3.png

* Migración Locations API 

4) Probamos gradualmente de sacar el Varnish con buen resultado

.image ./resources/locations4.png

* Migración Locations API 

5) Migramos KV y API a Fury y matamos ATL

.image ./resources/locations5.png

* Migración Locations API 

6) Matamos replica RDBS -> KV y dejamos KV -> RDBS como backup

.image ./resources/locations6.png

* Migración Locations API 

7)Matamos replica KV -> RDBS 

.image ./resources/locations7.png

* Migración Locations API 

Resúmen

.image ./resources/locations8.png

* Migración Locations API 

Ahorros en hardware

.image ./resources/locations_hardware.png

* Migración Locations API 

.image ./resources/locations_metrics.png

* Fury

.image ./resources/fury1.png

* Fury

.image ./resources/fury2.png

* Fury

Comandos Útiles

- fury get
- fury init ('grails', 'nodejs', 'php', 'empty’, 'grails',empty', 'go')
- fury run
- fury test
- fury create-version

* go-meli-toolkit

Tookit para resolver tareas comunes a todas las aplicaciones:

- mlauth -> resuelve la autenticación externa en Meli
- godog -> custom client para el envio de metricas a Datadog
- kvsclient -> client para interactuar con el KVS
- restfull -> restclient 
- goutils -> logger, json utils, retries
- gingonic -> renders y handlers utils para el gingonic web framework
- ...


[[https://github.com/mercadolibre/go-meli-toolkit][link ->]]

* Ejercicio 3

	Migrar el ejercicio 2 a Fury y evolucionarlo de forma tal que ahora se cachee el resultado 
	en el KVS y se devuelva desde alli en caso de existir.

	FORMA DE TRABAJO: Aplicación base en Fury -> golang-tutorial-api, crear branch y scope 
	por usuario.

[[http://fury.ml.com/#/golang-tutorial-api/general][Aplicación en Fury para el ejercicio ->]]

